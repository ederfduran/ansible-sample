version: 2.1

commands:
  # similar to a function definition print_pipeline_id(caller="Default") => echo << parameters.caller >>
  print_pipeline_id:
    description: "A very simple command for demonstration purposes"
    parameters:
      caller:
        type: string
        default: "Default"
    steps:
      - run: echo << parameters.caller >> $CIRCLE_WORKFLOW_ID

jobs:
  save_file:
    docker:
      - image: circleci/python:3.8
    steps:
      - print_pipeline_id:
          caller: "Eder"
      - run: echo "persist file between jobs" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt

  read_file:
    docker:
      - image: circleci/python:3.8
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt

  create_infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exist
          command: |
            aws cloudformation deploy \
              --template-file template.yml \
              --stack-name my-stack

  configure_infrastructure:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["42:2b:b0:e2:b2:36:58:a8:2c:7d:7c:8a:09:60:f0:b0"]
      - run:
          name: Install dependencies
          command: |
            sudo pip install ansible # install the dependencies needed for your playbook
            sudo pip install awscli --upgrade --user
      - run:
          name: get host
          command: |
            echo 'export MY_HOST=$(aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --filters --region us-east-1 --output text)' >> $BASH_ENV
            source $BASH_ENV
            echo $MY_HOST
      - run:
          name: add Host
          command: |
            echo "${MY_HOST}" >> inventory
      - run:
          name: Configure server
          command: |
            ansible-playbook -i inventory main-remote.yml

  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test.
          command: |
            URL="{{ansible_env.MY_HOST}}:3000"
            if curl -s --head ${URL} # test if server is up and running
            then
              return 0
            else
              return 1
            fi

workflows:
  main:
    jobs:
      - save_file
      - read_file:
          requires:
            - save_file
      - create_infrastructure
      - configure_infrastructure:
          requires:
            - create_infrastructure
      - smoke_test:
          requires:
            - configure_infrastructure
